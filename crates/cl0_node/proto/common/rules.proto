syntax = "proto3";
package common;

message Rule {
    oneof kind {
        ReactiveRule reactive = 1;
        DeclarativeRule declarative = 2;
        CaseRule case_rule = 3;
        FactRule fact_rule = 4;
    }
}

message ReactiveRule {
    PrimitiveEvent event = 1;
    Condition condition = 2; // Optional, empty = None
    Action action = 3;
}

message DeclarativeRule {
    Condition premise = 1;   // Optional, empty = None
    oneof target {
        AtomicCondition cc = 2;
        Condition ct = 3;
    }
}

message CaseRule {
    Action action = 1;
}

message FactRule {
    AtomicCondition condition = 1;
}

message Action {
    oneof kind {
        PrimitiveEvent primitive = 1;
        ActionList list = 2;
    }
}

message ActionList {
    oneof kind {
        SequenceAction sequence = 1;
        ParallelAction parallel = 2;
        AlternativeAction alternative = 3;
    }
}

message SequenceAction {
    repeated Action actions = 1;
}
message ParallelAction {
    repeated Action actions = 1;
}
message AlternativeAction {
    repeated Action actions = 1;
}

message PrimitiveEvent {
    oneof kind {
        string trigger = 1;
        AtomicCondition production = 2;
        AtomicCondition consumption = 3;
    }
}

message Condition {
    oneof kind {
        AtomicCondition atomic = 1;
        Condition not = 2;
        Conjunction conjunction = 3;
        Disjunction disjunction = 4;
        Condition parentheses = 5;
    }
}

message Conjunction {
    repeated Condition conditions = 1;
}
message Disjunction {
    repeated Condition conditions = 1;
}

message AtomicCondition {
    oneof kind {
        PrimitiveCondition primitive = 1;
        Compound compound = 2;
        SubCompound sub = 3;
    }
}

message PrimitiveCondition {
    string var_name = 1;
}

message SubCompound {
    string namespace = 1;
    AtomicCondition condition = 2;
}

message Compound {
    repeated Rule rules = 1;
    string alias = 2; // Optional: empty string = None
}
