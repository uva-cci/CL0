// @generated by protoc-gen-es v2.7.0 with parameter "target=ts"
// @generated from file web.proto (package web, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file web.proto.
 */
export const file_web: GenFile = /*@__PURE__*/
  fileDesc("Cgl3ZWIucHJvdG8SA3dlYiJ8CgVTY29wZRIdCgRraW5kGAEgASgOMg8ud2ViLlNjb3BlLktpbmQSCgoCaWQYAiABKAkiSAoES2luZBIUChBLSU5EX1VOU1BFQ0lGSUVEEAASEQoNQ09OVFJPTF9QTEFORRABEg0KCU5PREVfUE9PTBACEggKBE5PREUQAyIHCgVFbXB0eSJECgRKb2luEg8KB3VzZXJfaWQYASABKAkSGQoFc2NvcGUYAiABKAsyCi53ZWIuU2NvcGUSEAoIc2luY2VfaWQYAyABKAkiQQoFSW5wdXQSDwoHdXNlcl9pZBgBIAEoCRIZCgVzY29wZRgCIAEoCzIKLndlYi5TY29wZRIMCgRjb2RlGAMgASgJImEKBk91dHB1dBIKCgJpZBgBIAEoCRIZCgVzY29wZRgCIAEoCzIKLndlYi5TY29wZRIPCgd1c2VyX2lkGAMgASgJEg4KBnN0ZG91dBgEIAEoCRIPCgd1bml4X3RzGAUgASgDIlMKDEhpc3RvcnlDaHVuaxIZCgVzY29wZRgBIAEoCzIKLndlYi5TY29wZRIaCgVpdGVtcxgCIAMoCzILLndlYi5PdXRwdXQSDAoEZG9uZRgDIAEoCCIsCgNBY2sSEgoKaW5wdXRfZWNobxgBIAEoCRIRCglvdXRwdXRfaWQYAiABKAkiNwoMU2VydmVyTm90aWNlEhkKBXNjb3BlGAEgASgLMgoud2ViLlNjb3BlEgwKBHRleHQYAiABKAkimAEKC1NlcnZlckV2ZW50EiQKB2hpc3RvcnkYASABKAsyES53ZWIuSGlzdG9yeUNodW5rSAASHQoGb3V0cHV0GAIgASgLMgsud2ViLk91dHB1dEgAEhcKA2FjaxgDIAEoCzIILndlYi5BY2tIABIjCgZub3RpY2UYBCABKAsyES53ZWIuU2VydmVyTm90aWNlSABCBgoEa2luZCI+CgpSdWxlU3RhdHVzEhEKCW5hbWVzcGFjZRgBIAEoCRIMCgRuYW1lGAIgASgJEg8KB2VuYWJsZWQYAyABKAgiKgoJVmFyU3RhdHVzEgwKBG5hbWUYASABKAkSDwoHZW5hYmxlZBgCIAEoCCJpCg5TdGF0dXNTbmFwc2hvdBIZCgVzY29wZRgBIAEoCzIKLndlYi5TY29wZRIeCgVydWxlcxgCIAMoCzIPLndlYi5SdWxlU3RhdHVzEhwKBHZhcnMYAyADKAsyDi53ZWIuVmFyU3RhdHVzIioKDk5vZGVEZXNjcmlwdG9yEgoKAmlkGAEgASgJEgwKBG5hbWUYAiABKAkiUgoSTm9kZVBvb2xEZXNjcmlwdG9yEgoKAmlkGAEgASgJEgwKBG5hbWUYAiABKAkSIgoFbm9kZXMYAyADKAsyEy53ZWIuTm9kZURlc2NyaXB0b3IiUwoKU3lzdGVtVHJlZRIYChBjb250cm9sX3BsYW5lX2lkGAEgASgJEisKCm5vZGVfcG9vbHMYAiADKAsyFy53ZWIuTm9kZVBvb2xEZXNjcmlwdG9yIjYKCFByZXNlbmNlEg8KB3VzZXJfaWQYASABKAkSGQoFc2NvcGUYAiABKAsyCi53ZWIuU2NvcGUiMAoQUHJlc2VuY2VTbmFwc2hvdBIcCgV1c2VycxgBIAMoCzINLndlYi5QcmVzZW5jZSKUAQoOUHJlc2VuY2VVcGRhdGUSJgoEa2luZBgBIAEoDjIYLndlYi5QcmVzZW5jZVVwZGF0ZS5LaW5kEhsKBHVzZXIYAiABKAsyDS53ZWIuUHJlc2VuY2UiPQoES2luZBIUChBLSU5EX1VOU1BFQ0lGSUVEEAASCgoGSk9JTkVEEAESCAoETEVGVBACEgkKBU1PVkVEEAMiaQoNUHJlc2VuY2VFdmVudBIpCghzbmFwc2hvdBgBIAEoCzIVLndlYi5QcmVzZW5jZVNuYXBzaG90SAASJQoGdXBkYXRlGAIgASgLMhMud2ViLlByZXNlbmNlVXBkYXRlSABCBgoEa2luZDJeCgtSZXBsU2VydmljZRIqCglTdWJzY3JpYmUSCS53ZWIuSm9pbhoQLndlYi5TZXJ2ZXJFdmVudDABEiMKC1NlbmRDb21tYW5kEgoud2ViLklucHV0Gggud2ViLkFjazI9Cg1TdGF0dXNTZXJ2aWNlEiwKCUdldFN0YXR1cxIKLndlYi5TY29wZRoTLndlYi5TdGF0dXNTbmFwc2hvdDJFChNDb250cm9sUGxhbmVTZXJ2aWNlEi4KDVN1YnNjcmliZVRyZWUSCi53ZWIuU2NvcGUaDy53ZWIuU3lzdGVtVHJlZTABMocBCg9QcmVzZW5jZVNlcnZpY2USLQoJU3Vic2NyaWJlEgoud2ViLkVtcHR5GhIud2ViLlByZXNlbmNlRXZlbnQwARIhCgRKb2luEg0ud2ViLlByZXNlbmNlGgoud2ViLkVtcHR5EiIKBUxlYXZlEg0ud2ViLlByZXNlbmNlGgoud2ViLkVtcHR5YgZwcm90bzM");

/**
 * / Identifies where an action/event takes place.
 *
 * @generated from message web.Scope
 */
export type Scope = Message<"web.Scope"> & {
  /**
   * @generated from field: web.Scope.Kind kind = 1;
   */
  kind: Scope_Kind;

  /**
   * control-plane-id, node-pool-id, or node-id
   *
   * @generated from field: string id = 2;
   */
  id: string;
};

/**
 * Describes the message web.Scope.
 * Use `create(ScopeSchema)` to create a new message.
 */
export const ScopeSchema: GenMessage<Scope> = /*@__PURE__*/
  messageDesc(file_web, 0);

/**
 * @generated from enum web.Scope.Kind
 */
export enum Scope_Kind {
  /**
   * @generated from enum value: KIND_UNSPECIFIED = 0;
   */
  KIND_UNSPECIFIED = 0,

  /**
   * @generated from enum value: CONTROL_PLANE = 1;
   */
  CONTROL_PLANE = 1,

  /**
   * @generated from enum value: NODE_POOL = 2;
   */
  NODE_POOL = 2,

  /**
   * @generated from enum value: NODE = 3;
   */
  NODE = 3,
}

/**
 * Describes the enum web.Scope.Kind.
 */
export const Scope_KindSchema: GenEnum<Scope_Kind> = /*@__PURE__*/
  enumDesc(file_web, 0, 0);

/**
 * / Empty type
 *
 * @generated from message web.Empty
 */
export type Empty = Message<"web.Empty"> & {
};

/**
 * Describes the message web.Empty.
 * Use `create(EmptySchema)` to create a new message.
 */
export const EmptySchema: GenMessage<Empty> = /*@__PURE__*/
  messageDesc(file_web, 1);

/**
 * / Client subscribes to REPL output/history for a scope.
 *
 * @generated from message web.Join
 */
export type Join = Message<"web.Join"> & {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * @generated from field: web.Scope scope = 2;
   */
  scope?: Scope;

  /**
   * optional: resume from a known output id
   *
   * @generated from field: string since_id = 3;
   */
  sinceId: string;
};

/**
 * Describes the message web.Join.
 * Use `create(JoinSchema)` to create a new message.
 */
export const JoinSchema: GenMessage<Join> = /*@__PURE__*/
  messageDesc(file_web, 2);

/**
 * / Client sends a command to execute within a scope.
 *
 * @generated from message web.Input
 */
export type Input = Message<"web.Input"> & {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * @generated from field: web.Scope scope = 2;
   */
  scope?: Scope;

  /**
   * @generated from field: string code = 3;
   */
  code: string;
};

/**
 * Describes the message web.Input.
 * Use `create(InputSchema)` to create a new message.
 */
export const InputSchema: GenMessage<Input> = /*@__PURE__*/
  messageDesc(file_web, 3);

/**
 * / A single REPL output.
 *
 * @generated from message web.Output
 */
export type Output = Message<"web.Output"> & {
  /**
   * server-assigned
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: web.Scope scope = 2;
   */
  scope?: Scope;

  /**
   * who triggered it (or "system")
   *
   * @generated from field: string user_id = 3;
   */
  userId: string;

  /**
   * @generated from field: string stdout = 4;
   */
  stdout: string;

  /**
   * @generated from field: int64 unix_ts = 5;
   */
  unixTs: bigint;
};

/**
 * Describes the message web.Output.
 * Use `create(OutputSchema)` to create a new message.
 */
export const OutputSchema: GenMessage<Output> = /*@__PURE__*/
  messageDesc(file_web, 4);

/**
 * / Batch of history items sent immediately after Join.
 *
 * @generated from message web.HistoryChunk
 */
export type HistoryChunk = Message<"web.HistoryChunk"> & {
  /**
   * @generated from field: web.Scope scope = 1;
   */
  scope?: Scope;

  /**
   * @generated from field: repeated web.Output items = 2;
   */
  items: Output[];

  /**
   * @generated from field: bool done = 3;
   */
  done: boolean;
};

/**
 * Describes the message web.HistoryChunk.
 * Use `create(HistoryChunkSchema)` to create a new message.
 */
export const HistoryChunkSchema: GenMessage<HistoryChunk> = /*@__PURE__*/
  messageDesc(file_web, 5);

/**
 * / Acknowledgment for a submitted input.
 *
 * @generated from message web.Ack
 */
export type Ack = Message<"web.Ack"> & {
  /**
   * @generated from field: string input_echo = 1;
   */
  inputEcho: string;

  /**
   * @generated from field: string output_id = 2;
   */
  outputId: string;
};

/**
 * Describes the message web.Ack.
 * Use `create(AckSchema)` to create a new message.
 */
export const AckSchema: GenMessage<Ack> = /*@__PURE__*/
  messageDesc(file_web, 6);

/**
 * / Informational notice (user joined/left, etc.).
 *
 * @generated from message web.ServerNotice
 */
export type ServerNotice = Message<"web.ServerNotice"> & {
  /**
   * @generated from field: web.Scope scope = 1;
   */
  scope?: Scope;

  /**
   * @generated from field: string text = 2;
   */
  text: string;
};

/**
 * Describes the message web.ServerNotice.
 * Use `create(ServerNoticeSchema)` to create a new message.
 */
export const ServerNoticeSchema: GenMessage<ServerNotice> = /*@__PURE__*/
  messageDesc(file_web, 7);

/**
 * / Server REPL stream event.
 *
 * @generated from message web.ServerEvent
 */
export type ServerEvent = Message<"web.ServerEvent"> & {
  /**
   * @generated from oneof web.ServerEvent.kind
   */
  kind: {
    /**
     * @generated from field: web.HistoryChunk history = 1;
     */
    value: HistoryChunk;
    case: "history";
  } | {
    /**
     * @generated from field: web.Output output = 2;
     */
    value: Output;
    case: "output";
  } | {
    /**
     * @generated from field: web.Ack ack = 3;
     */
    value: Ack;
    case: "ack";
  } | {
    /**
     * @generated from field: web.ServerNotice notice = 4;
     */
    value: ServerNotice;
    case: "notice";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message web.ServerEvent.
 * Use `create(ServerEventSchema)` to create a new message.
 */
export const ServerEventSchema: GenMessage<ServerEvent> = /*@__PURE__*/
  messageDesc(file_web, 8);

/**
 * @generated from message web.RuleStatus
 */
export type RuleStatus = Message<"web.RuleStatus"> & {
  /**
   * @generated from field: string namespace = 1;
   */
  namespace: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: bool enabled = 3;
   */
  enabled: boolean;
};

/**
 * Describes the message web.RuleStatus.
 * Use `create(RuleStatusSchema)` to create a new message.
 */
export const RuleStatusSchema: GenMessage<RuleStatus> = /*@__PURE__*/
  messageDesc(file_web, 9);

/**
 * @generated from message web.VarStatus
 */
export type VarStatus = Message<"web.VarStatus"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: bool enabled = 2;
   */
  enabled: boolean;
};

/**
 * Describes the message web.VarStatus.
 * Use `create(VarStatusSchema)` to create a new message.
 */
export const VarStatusSchema: GenMessage<VarStatus> = /*@__PURE__*/
  messageDesc(file_web, 10);

/**
 * @generated from message web.StatusSnapshot
 */
export type StatusSnapshot = Message<"web.StatusSnapshot"> & {
  /**
   * must be KIND_NODE
   *
   * @generated from field: web.Scope scope = 1;
   */
  scope?: Scope;

  /**
   * @generated from field: repeated web.RuleStatus rules = 2;
   */
  rules: RuleStatus[];

  /**
   * @generated from field: repeated web.VarStatus vars = 3;
   */
  vars: VarStatus[];
};

/**
 * Describes the message web.StatusSnapshot.
 * Use `create(StatusSnapshotSchema)` to create a new message.
 */
export const StatusSnapshotSchema: GenMessage<StatusSnapshot> = /*@__PURE__*/
  messageDesc(file_web, 11);

/**
 * @generated from message web.NodeDescriptor
 */
export type NodeDescriptor = Message<"web.NodeDescriptor"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;
};

/**
 * Describes the message web.NodeDescriptor.
 * Use `create(NodeDescriptorSchema)` to create a new message.
 */
export const NodeDescriptorSchema: GenMessage<NodeDescriptor> = /*@__PURE__*/
  messageDesc(file_web, 12);

/**
 * @generated from message web.NodePoolDescriptor
 */
export type NodePoolDescriptor = Message<"web.NodePoolDescriptor"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: repeated web.NodeDescriptor nodes = 3;
   */
  nodes: NodeDescriptor[];
};

/**
 * Describes the message web.NodePoolDescriptor.
 * Use `create(NodePoolDescriptorSchema)` to create a new message.
 */
export const NodePoolDescriptorSchema: GenMessage<NodePoolDescriptor> = /*@__PURE__*/
  messageDesc(file_web, 13);

/**
 * @generated from message web.SystemTree
 */
export type SystemTree = Message<"web.SystemTree"> & {
  /**
   * @generated from field: string control_plane_id = 1;
   */
  controlPlaneId: string;

  /**
   * @generated from field: repeated web.NodePoolDescriptor node_pools = 2;
   */
  nodePools: NodePoolDescriptor[];
};

/**
 * Describes the message web.SystemTree.
 * Use `create(SystemTreeSchema)` to create a new message.
 */
export const SystemTreeSchema: GenMessage<SystemTree> = /*@__PURE__*/
  messageDesc(file_web, 14);

/**
 * @generated from message web.Presence
 */
export type Presence = Message<"web.Presence"> & {
  /**
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * where the user is currently looking
   *
   * @generated from field: web.Scope scope = 2;
   */
  scope?: Scope;
};

/**
 * Describes the message web.Presence.
 * Use `create(PresenceSchema)` to create a new message.
 */
export const PresenceSchema: GenMessage<Presence> = /*@__PURE__*/
  messageDesc(file_web, 15);

/**
 * @generated from message web.PresenceSnapshot
 */
export type PresenceSnapshot = Message<"web.PresenceSnapshot"> & {
  /**
   * @generated from field: repeated web.Presence users = 1;
   */
  users: Presence[];
};

/**
 * Describes the message web.PresenceSnapshot.
 * Use `create(PresenceSnapshotSchema)` to create a new message.
 */
export const PresenceSnapshotSchema: GenMessage<PresenceSnapshot> = /*@__PURE__*/
  messageDesc(file_web, 16);

/**
 * @generated from message web.PresenceUpdate
 */
export type PresenceUpdate = Message<"web.PresenceUpdate"> & {
  /**
   * @generated from field: web.PresenceUpdate.Kind kind = 1;
   */
  kind: PresenceUpdate_Kind;

  /**
   * @generated from field: web.Presence user = 2;
   */
  user?: Presence;
};

/**
 * Describes the message web.PresenceUpdate.
 * Use `create(PresenceUpdateSchema)` to create a new message.
 */
export const PresenceUpdateSchema: GenMessage<PresenceUpdate> = /*@__PURE__*/
  messageDesc(file_web, 17);

/**
 * @generated from enum web.PresenceUpdate.Kind
 */
export enum PresenceUpdate_Kind {
  /**
   * @generated from enum value: KIND_UNSPECIFIED = 0;
   */
  KIND_UNSPECIFIED = 0,

  /**
   * @generated from enum value: JOINED = 1;
   */
  JOINED = 1,

  /**
   * @generated from enum value: LEFT = 2;
   */
  LEFT = 2,

  /**
   * @generated from enum value: MOVED = 3;
   */
  MOVED = 3,
}

/**
 * Describes the enum web.PresenceUpdate.Kind.
 */
export const PresenceUpdate_KindSchema: GenEnum<PresenceUpdate_Kind> = /*@__PURE__*/
  enumDesc(file_web, 17, 0);

/**
 * @generated from message web.PresenceEvent
 */
export type PresenceEvent = Message<"web.PresenceEvent"> & {
  /**
   * @generated from oneof web.PresenceEvent.kind
   */
  kind: {
    /**
     * sent immediately after subscribe
     *
     * @generated from field: web.PresenceSnapshot snapshot = 1;
     */
    value: PresenceSnapshot;
    case: "snapshot";
  } | {
    /**
     * live deltas
     *
     * @generated from field: web.PresenceUpdate update = 2;
     */
    value: PresenceUpdate;
    case: "update";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message web.PresenceEvent.
 * Use `create(PresenceEventSchema)` to create a new message.
 */
export const PresenceEventSchema: GenMessage<PresenceEvent> = /*@__PURE__*/
  messageDesc(file_web, 18);

/**
 * @generated from service web.ReplService
 */
export const ReplService: GenService<{
  /**
   * / Subscribe to REPL events (history + live output + notices).
   *
   * @generated from rpc web.ReplService.Subscribe
   */
  subscribe: {
    methodKind: "server_streaming";
    input: typeof JoinSchema;
    output: typeof ServerEventSchema;
  },
  /**
   * / Send a command to execute within a scope.
   *
   * @generated from rpc web.ReplService.SendCommand
   */
  sendCommand: {
    methodKind: "unary";
    input: typeof InputSchema;
    output: typeof AckSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_web, 0);

/**
 * @generated from service web.StatusService
 */
export const StatusService: GenService<{
  /**
   * / Unary snapshot of current rule/var status (for nodes).
   *
   * @generated from rpc web.StatusService.GetStatus
   */
  getStatus: {
    methodKind: "unary";
    input: typeof ScopeSchema;
    output: typeof StatusSnapshotSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_web, 1);

/**
 * @generated from service web.ControlPlaneService
 */
export const ControlPlaneService: GenService<{
  /**
   * / Stream updates of the system tree (node pools/nodes).
   * / Typically only called with Scope{CONTROL_PLANE}.
   *
   * @generated from rpc web.ControlPlaneService.SubscribeTree
   */
  subscribeTree: {
    methodKind: "server_streaming";
    input: typeof ScopeSchema;
    output: typeof SystemTreeSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_web, 2);

/**
 * @generated from service web.PresenceService
 */
export const PresenceService: GenService<{
  /**
   * / Stream presence events (initial snapshot + live updates).
   *
   * @generated from rpc web.PresenceService.Subscribe
   */
  subscribe: {
    methodKind: "server_streaming";
    input: typeof EmptySchema;
    output: typeof PresenceEventSchema;
  },
  /**
   * / User explicitly joins a scope.
   *
   * @generated from rpc web.PresenceService.Join
   */
  join: {
    methodKind: "unary";
    input: typeof PresenceSchema;
    output: typeof EmptySchema;
  },
  /**
   * / User explicitly leaves a scope.
   *
   * @generated from rpc web.PresenceService.Leave
   */
  leave: {
    methodKind: "unary";
    input: typeof PresenceSchema;
    output: typeof EmptySchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_web, 3);

