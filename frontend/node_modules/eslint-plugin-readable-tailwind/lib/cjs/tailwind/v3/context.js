"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadTailwindConfig = loadTailwindConfig;
exports.createTailwindContextFromConfigFile = createTailwindContextFromConfigFile;
const defaultConfig_js_1 = __importDefault(require("tailwindcss/defaultConfig.js"));
const setupContextUtils = __importStar(require("tailwindcss/lib/lib/setupContextUtils.js"));
const loadConfig_js_1 = __importDefault(require("tailwindcss/loadConfig.js"));
const resolveConfig_js_1 = __importDefault(require("tailwindcss/resolveConfig.js"));
function loadTailwindConfig(path) {
    const config = path ? (0, loadConfig_js_1.default)(path) : defaultConfig_js_1.default;
    return (0, resolveConfig_js_1.default)(config);
}
const CACHE = new Map();
function createTailwindContextFromConfigFile(path, invalidate) {
    const cacheKey = path ?? "default";
    if (CACHE.has(cacheKey) && !invalidate) {
        return CACHE.get(cacheKey);
    }
    const tailwindConfig = loadTailwindConfig(path);
    const context = setupContextUtils.createContext?.(tailwindConfig) ?? setupContextUtils.default?.createContext?.(tailwindConfig);
    CACHE.set(cacheKey, context);
    return context;
}
//# sourceMappingURL=context.js.map