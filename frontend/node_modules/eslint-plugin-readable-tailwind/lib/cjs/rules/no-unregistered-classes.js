"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.noUnregisteredClasses = exports.DEFAULT_IGNORED_UNREGISTERED_CLASSES = void 0;
exports.getOptions = getOptions;
const better_tailwindcss_async_unregistered_classes_sync_js_1 = require("../tailwind/async/unregistered-classes.sync.js");
const better_tailwindcss_options_default_options_js_1 = require("../options/default-options.js");
const better_tailwindcss_options_descriptions_js_1 = require("../options/descriptions.js");
const better_tailwindcss_utils_rule_js_1 = require("../utils/rule.js");
const better_tailwindcss_utils_utils_js_1 = require("../utils/utils.js");
exports.DEFAULT_IGNORED_UNREGISTERED_CLASSES = [
    "^group(?:\\/(\\S*))?$",
    "^peer(?:\\/(\\S*))?$"
];
const defaultOptions = {
    attributes: better_tailwindcss_options_default_options_js_1.DEFAULT_ATTRIBUTE_NAMES,
    callees: better_tailwindcss_options_default_options_js_1.DEFAULT_CALLEE_NAMES,
    ignore: exports.DEFAULT_IGNORED_UNREGISTERED_CLASSES,
    tags: better_tailwindcss_options_default_options_js_1.DEFAULT_TAG_NAMES,
    variables: better_tailwindcss_options_default_options_js_1.DEFAULT_VARIABLE_NAMES
};
const DOCUMENTATION_URL = "https://github.com/schoero/eslint-plugin-better-tailwindcss/blob/main/docs/rules/no-unregistered-classes.md";
exports.noUnregisteredClasses = {
    name: "no-unregistered-classes",
    rule: {
        create: ctx => (0, better_tailwindcss_utils_rule_js_1.createRuleListener)(ctx, getOptions(ctx), lintLiterals),
        meta: {
            docs: {
                description: "Disallow any css classes that are not registered in tailwindcss.",
                recommended: false,
                url: DOCUMENTATION_URL
            },
            fixable: "code",
            schema: [
                {
                    additionalProperties: false,
                    properties: {
                        ...better_tailwindcss_options_descriptions_js_1.CALLEE_SCHEMA,
                        ...better_tailwindcss_options_descriptions_js_1.ATTRIBUTE_SCHEMA,
                        ...better_tailwindcss_options_descriptions_js_1.VARIABLE_SCHEMA,
                        ...better_tailwindcss_options_descriptions_js_1.TAG_SCHEMA,
                        ...better_tailwindcss_options_descriptions_js_1.ENTRYPOINT_SCHEMA,
                        ...better_tailwindcss_options_descriptions_js_1.TAILWIND_CONFIG_SCHEMA,
                        ignore: {
                            description: "A list of classes that should be ignored by the rule.",
                            items: {
                                type: "string"
                            },
                            type: "array"
                        }
                    },
                    type: "object"
                }
            ],
            type: "problem"
        }
    }
};
function lintLiterals(ctx, literals) {
    for (const literal of literals) {
        const { ignore, tailwindConfig } = getOptions(ctx);
        const classes = (0, better_tailwindcss_utils_utils_js_1.splitClasses)(literal.content);
        const [unregisteredClasses, warnings] = (0, better_tailwindcss_async_unregistered_classes_sync_js_1.getUnregisteredClasses)({ classes, configPath: tailwindConfig, cwd: ctx.cwd });
        const unregisteredClassesWarnings = warnings.map(warning => ({ ...warning, url: DOCUMENTATION_URL }));
        if (unregisteredClasses.length === 0) {
            continue;
        }
        for (const unregisteredClass of unregisteredClasses) {
            if (ignore.some(ignoredClass => unregisteredClass.match(ignoredClass))) {
                continue;
            }
            ctx.report({
                data: {
                    unregistered: (0, better_tailwindcss_utils_utils_js_1.display)(unregisteredClass)
                },
                loc: (0, better_tailwindcss_utils_utils_js_1.getExactClassLocation)(literal, unregisteredClass),
                message: (0, better_tailwindcss_utils_utils_js_1.augmentMessageWithWarnings)("Unregistered class detected: {{ unregistered }}", unregisteredClassesWarnings)
            });
        }
    }
}
function getOptions(ctx) {
    const options = ctx.options[0] ?? {};
    const common = (0, better_tailwindcss_utils_utils_js_1.getCommonOptions)(ctx);
    const ignore = options.ignore ?? defaultOptions.ignore;
    return {
        ...common,
        ignore
    };
}
//# sourceMappingURL=no-unregistered-classes.js.map